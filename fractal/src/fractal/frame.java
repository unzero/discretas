/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package fractal;


import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultListModel;


public class frame extends javax.swing.JFrame {

    /**
     * Creates new form frame
     */
    public frame() {
        initComponents();
        read_init_config();
        flush();
        jList1.setModel(new DefaultListModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Por favor ingrese el mensaje");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Cifrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
            jTable2.getColumnModel().getColumn(6).setResizable(false);
            jTable2.getColumnModel().getColumn(7).setResizable(false);
            jTable2.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel2.setText("Matrices");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea2KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTextArea2);

        jButton2.setText("Siguiente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane5)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(31, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        iterator = false;
        if(jTextArea2.getText().length() == 0){
            JOptionPane.showMessageDialog(this, "Por favor ingrese algun texto", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            jTextArea1.setText("");
            original_message = jTextArea2.getText();
            generate_encode_matrix();
            for(int x=0;x<original_message.length();++x){
                char chiper = encode_function(original_message.charAt(x),0,rand.nextInt(10));
                jTextArea1.setText(jTextArea1.getText()+chiper);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       original_message = jTextArea2.getText();
        if(jTextArea2.getText().length() == 0){
            JOptionPane.showMessageDialog(this, "Por favor ingrese algun texto", "Error", JOptionPane.ERROR_MESSAGE);
        }else if(iterator){
            if(actual_character<original_message.length()){
                while(trace.size()>0)trace.remove();
                int tmp = rand.nextInt(10);
                System.out.println(tmp);
                char chiper = encode_function_ex(original_message.charAt(actual_character),0,tmp);
                jTextArea1.setText(jTextArea1.getText()+chiper);
                actual_character++;
            }
        }else{
            generate_encode_matrix();
            jTextArea1.setText("");
            actual_character = 0;
            iterator = true;
            jButton2.doClick();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextArea2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyPressed
        iterator = false;
    }//GEN-LAST:event_jTextArea2KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }
    
    /*METODOS ORIGINALES DEL SCF*/
    void generate_encode_matrix(){
	long u = 0;
	long ac = 0;
	for(int i=0;i<original_message.length();++i){
		++ac;
		u = (u + (original_message.charAt(i)*ac)%q)%original_message.length();
		ac = (ac%q);
	}
	u = u%10+1;
	for(int x=0;x<u;++x){
		generate_baker_psi();
	}
    }

    /**
    *GENERA LAS LLAVES (CONJUNTO LAMBDA Y SIGMA) PARA LA TRANSFORMACION DE BAKER
    *SE EVITAN GENERAR CONJUNTOS DE SOLO 1'S {1,1,1,...,1} O EL CONJUNTO {N}
    */
    void generate_baker_keys(){
            do{
                    sigma.clear();
                    lambda.clear();	
                    int ac = n;
                    while(ac>0){
                            int nx = rand.nextInt(ac) + 1;
                            if(nx>0 && n%nx == 0){
                                    lambda.add(nx);
                                    ac -= nx;
                            }
                    }	
                    sigma.add(0);
                    for(int x=0;x<lambda.size()-1;++x){
                            sigma.add(sigma.get(x)+lambda.get(x));
                    }
            }while(lambda.size() == 0 || lambda.get(0)==n || lambda.size()==n);
    }

    /**
    *EVALUA LA TRANSFORMACION DISCRETA DE BAKER SOBRE B_{N,LAMBDA}(X,Y)
    */
    Pair<Integer,Integer> baker_map(int x,int y){
            int xp,yp,index=0;
            while(!(sigma.get(index)<=y && y<sigma.get(index)+lambda.get(index) ))index++;
            int qi = n/lambda.get(index);
            xp = n - sigma.get(index) - 1 - (int)Math.floor((n-x-1)/qi);
            yp = (qi)*(y-sigma.get(index)) + ((n-x-1)%qi);
            return new Pair(xp,yp);
    }

    /*
    *APLICA LA TRANSFORMACION DE BAKER A LA MATRIZ
    * -PRIMERO GENERA UN CONJUNTO DE LLAVES
    * -APLICA B_{N,LAMBDA}(PSI)
    * -ELIMINA LAS LLAVES USADAS
    */
    void generate_baker_psi(){
            /*GENERADO DE LAS LLAVES PARA LA MATRIZ*/
            generate_baker_keys();
            
            /*SE GENERA UNA NUEVA MATRIZ, EN BLANCO*/
            LinkedList<LinkedList<Character> > new_encode_matrix = new LinkedList<LinkedList<Character> >();
            for(int i=0;i<n;++i){
                    LinkedList<Character> new_vector = new LinkedList<Character>();
                    new_encode_matrix.add(new_vector);
                    for(int j=0;j<n;++j){
                            new_encode_matrix.get(i).add(' ');
                    }
            }

            /*SE EVALUA LA TRANSFORMACION DE BAKER Y UBICA EN LA NUEVA MATRIZ*/
            for(int i=0;i<n;++i){
                    for(int j=0;j<n;++j){
                            Pair<Integer,Integer> new_pos = baker_map(i,j);
                            new_encode_matrix.get(new_pos.first).set(new_pos.second,encode_matrix.get(i).get(j));
                            encode_index.put(encode_matrix.get(i).get(j), new_pos);
                    }
            }

            /*REMPLAZA LA ANTIGUA MATRIZ*/
            encode_matrix = new_encode_matrix;   
            flush();
            print_keys();
            /*BORRADO DE LLAVES*/
            lambda.clear();
    }

    /*CIFRADO DEL CARACTER POR MEDIO DEL FRACTAL DE COLLATZ*/
    char encode_function(char alpha,int varphi,int rho){
            /*VALIDACION QUE EL CARACTER SE ENCUENTRE DENTRO DE LOS SIMBOLOS ACEPTADOS*/
            if(is_valid_character.get(alpha) == null){
                JOptionPane.showMessageDialog(this, "CARACTER INVALIDO, EL PROGRAMA SE CERRARA", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            }
            /*POSICION ACTUAL DEL CARACTER A CIFRAR*/
            int x= encode_index.get(alpha).first;
            int y= encode_index.get(alpha).second;

            /*CALCULO DE LA NUEVA POSICION*/
            Pair<Integer,Integer> nuevaPos = collatzFrac(x,y, varphi, rho);
            int newX = nuevaPos.first;
            int newY = nuevaPos.second;

            /*SE GENERA EL NUEVO CARACTER*/
            return encode_matrix.get(newX).get(newY);
    }
    
    /*EVALUACION DEL FRACTAL DE COLLATZ PARA LA POSICION ACUTAL*/
    Pair<Integer,Integer> collatzFrac (int x,int y, int cont, int iter){
            if(cont==iter){
                    return new Pair(x%9,y%9);
            }

            if(x==3){x=10;}
            if(y==3){y=10;}
            if(x==7){x=16;}
            if(y==7){y=16;}
            if(x==8){x=12;}
            if(y==8){y=12;}

            if(x % 2 == 0 && y % 2 == 0){
                    x=x/2;
                    y=y/2;
            }else if(x % 2 != 0 && y % 2 == 0){
                    x=(3*x)+1;
                    y=y/2;
            }else if(x % 2 == 0 && y % 2 != 0){
                    x=x/2;
                    y=(3*y)+1;
            }else{
                    x=(3*x)+1;
                    y=(3*y)+1;
            }
            return collatzFrac(x,y,cont+1,iter);
    }
    
        
    char encode_function_ex(char alpha,int varphi,int rho){
            /*VALIDACION QUE EL CARACTER SE ENCUENTRE DENTRO DE LOS SIMBOLOS ACEPTADOS*/
            if(is_valid_character.get(alpha) == null){
                JOptionPane.showMessageDialog(this, "CARACTER INVALIDO, EL PROGRAMA SE CERRARA", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(-1);
            }
            /*POSICION ACTUAL DEL CARACTER A CIFRAR*/
            int x= encode_index.get(alpha).first;
            int y= encode_index.get(alpha).second;
            trace.add(encode_matrix.get(x).get(y)+" -> ");

            /*CALCULO DE LA NUEVA POSICION*/
            Pair<Integer,Integer> nuevaPos = collatzFrac_ex(x,y, varphi, rho);
            int newX = nuevaPos.first;
            int newY = nuevaPos.second;
            
            DefaultListModel model = (DefaultListModel)jList1.getModel();
            model.removeAllElements();
            for(String el : trace)model.addElement(el);
            jList1.setModel(model);
            /*SE GENERA EL NUEVO CARACTER*/
            return encode_matrix.get(newX).get(newY);
    }
    
    /*EVALUACION DEL FRACTAL DE COLLATZ PARA LA POSICION ACUTAL*/
    Pair<Integer,Integer> collatzFrac_ex(int x,int y, int cont, int iter){
        
            if(cont==iter){
                StringBuilder new_trace = new StringBuilder();
                new_trace.append(encode_matrix.get(x%n).get(y%n));
                trace.add(new_trace.toString());
                return new Pair(x%9,y%9);
            }else{
                StringBuilder new_trace = new StringBuilder();
                new_trace.append(encode_matrix.get(x%n).get(y%n));
                new_trace.append(" -> ");
                trace.add(new_trace.toString());
            }
            
            if(x==3){x=10;}
            if(y==3){y=10;}
            if(x==7){x=16;}
            if(y==7){y=16;}
            if(x==8){x=12;}
            if(y==8){y=12;}

            if(x % 2 == 0 && y % 2 == 0){
                    x=x/2;
                    y=y/2;
            }else if(x % 2 != 0 && y % 2 == 0){
                    x=(3*x)+1;
                    y=y/2;
            }else if(x % 2 == 0 && y % 2 != 0){
                    x=x/2;
                    y=(3*y)+1;
            }else{
                    x=(3*x)+1;
                    y=(3*y)+1;
            }
            return collatzFrac_ex(x,y,cont+1,iter);
    }
    
    /*METODO PARA LA IMPRESION DE LA MATRIZ*/
    void flush(){
        jTable2.setModel((DefaultTableModel)jTable1.getModel());
        Object[] tableFields = {
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX"
         };
        jTable1.setModel(new DefaultTableModel(tableFields,0));
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        for(int x=0;x<n;++x){
            model.addRow(encode_matrix.get(x).toArray());
        }
    }
    
    /*METODO PARA IMPRESION DE LLAVES*/
    void print_keys(){
        StringBuilder line = new StringBuilder("[");
        for(int x=0;x<lambda.size();++x){
            line.append(lambda.get(x)+", ");
        }
        line.setLength(line.length()-2);
        line.append("]");
        JOptionPane.showMessageDialog(this, "Conjunto de llaves: \n"+line.toString(),"Mensaje",1);
        
    }
    
    /*METODO DE LECTURA PARA LA CONFIGURACION INICIAL*/
    void read_init_config(){
        BufferedReader reader = null;
        try{
           String new_line;
           reader = new BufferedReader(new FileReader("./confg.txt"));
           new_line = reader.readLine();
           n = Integer.parseInt(new_line);
           new_line = reader.readLine();
           q = Integer.parseInt(new_line);
           for(int x=0;x<n;++x){
               new_line = reader.readLine();
               LinkedList<Character> tmp = new LinkedList<Character>();
               encode_matrix.add(tmp);
               for(int y=0;y<n;++y){
                   encode_matrix.get(x).add(new_line.charAt(y));
                   encode_index.put(new_line.charAt(y),new Pair(x,y));
                   is_valid_character.put(new_line.charAt(y),100);
               }
           }
        }catch(IOException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "FALTA EL ARCHIVO DE CONFIGURACION INICIAL, EL PROGRAMA SE CERRARA", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
        
    }
    
    /*CAMPOS PARA EL PROGRAMA*/
    boolean iterator = false;
    int n,q,actual_character=0;
    LinkedList<String> trace = new LinkedList<String>();
    String original_message;
    Random rand = new Random();
    LinkedList<LinkedList<Character> > encode_matrix = new LinkedList<LinkedList<Character> >();
    HashMap<Character,Pair<Integer,Integer> > encode_index = new HashMap<Character,Pair<Integer,Integer> >();
    HashMap<Character,Integer> is_valid_character = new HashMap<Character,Integer>();
    LinkedList<Integer> lambda = new LinkedList<Integer>();
    LinkedList<Integer> sigma = new LinkedList<Integer>();
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}

class Pair<F, S> {
    public F first; //first member of pair
    public S second; //second member of pair

    public Pair(F first, S second) {
        this.first = first;
        this.second = second;
    }

    public void setFirst(F first) {
        this.first = first;
    }

    public void setSecond(S second) {
        this.second = second;
    }

    public F getFirst() {
        return first;
    }

    public S getSecond() {
        return second;
    }
}